version: "3.9"

services:
  # ---------- PostgreSQL ----------
  # postgres:
  #   image: postgres:15
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgre
  #     POSTGRES_DB: productdb
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  orderdb:
    image: postgres:15
    container_name: orderdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgre
      POSTGRES_DB: orderdb
    ports:
      - "5433:5432"
    volumes:
      - ./order-service/order_schema.sql:/docker-entrypoint-initdb.d/order_schema.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  productdb:
    image: postgres:15
    container_name: productdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgre
      POSTGRES_DB: productdb
    ports:
      - "5434:5432"
    volumes:
      - ./product-service/product_schema.sql:/docker-entrypoint-initdb.d/product_schema.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------- Redis ----------
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ---------- RabbitMQ ----------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ---------- Product Service (NestJS) ----------
  product-service:
    build: ./product-service
    container_name: product-service
    environment:
      DATABASE_HOST: productdb
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgre
      DATABASE_NAME: productdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    ports:
      - "3000:3000"
    depends_on:
      productdb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  # ---------- Order Service (Go) ----------
  order-service:
    build: ./order-service
    container_name: order-service
    environment:
      DATABASE_HOST: orderdb
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgre
      DATABASE_NAME: orderdb
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3001:3001"
    depends_on:
      orderdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
  
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: